name: CI

on:
  push:
  pull_request:

permissions:
  contents: write

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - name: Checkout
      uses: actions/checkout@v3
    - name: Test
      shell: bash
      env:
        CGO_ENABLED: '0'
      run: go test -v ./...

  create-release:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    outputs:
      release-name: ${{ steps.create-release.outputs.release-name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - id: create-release
      name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_NAME="${GITHUB_REF#refs/tags/}"
        gh release create --draft "${RELEASE_NAME}"
        echo "::set-output name=release-name::${RELEASE_NAME}"

  upload-release:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        include:
        - { GOOS: windows, GOARCH: amd64 }
        - { GOOS: darwin,  GOARCH: amd64 }
        - { GOOS: darwin,  GOARCH: arm64 }
        - { GOOS: linux,   GOARCH: amd64 }

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
    - id: build-release-asset
      name: Build release asset
      env:
        CGO_ENABLED: '0'
        GOOS: ${{ matrix.GOOS }}
        GOARCH: ${{ matrix.GOARCH }}
      run: |
        go install -trimpath -ldflags "-s -w" "github.com/${GITHUB_REPOSITORY}/cmd/leveldb@${GITHUB_REF#refs/tags/}"

        ASSET_DIR="leveldb-${GOOS}-${GOARCH}-${GITHUB_REF#refs/tags/v}"
        mkdir "${ASSET_DIR}"
        cp LICENSE README.md "${ASSET_DIR}"

        if [[ "${GOOS}/${GOARCH}" == "$(go env GOHOSTOS)/$(go env GOHOSTARCH)" ]]; then
          GOBIN="$(go env GOPATH)/bin"
        else
          GOBIN="$(go env GOPATH)/bin/${GOOS}_${GOARCH}"
        fi
        GOEXE="$(go env GOEXE)"
        cp "${GOBIN}/leveldb${GOEXE}" "${ASSET_DIR}"

        if [[ "${GOOS}" == "windows" ]]; then
          zip "${ASSET_DIR}.zip" "${ASSET_DIR}"/*
          echo "::set-output name=asset-name::${ASSET_DIR}.zip"
        else
          tar zcf "${ASSET_DIR}.tar.gz" "${ASSET_DIR}"
          echo "::set-output name=asset-name::${ASSET_DIR}.tar.gz"
        fi
    - name: Upload release asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_NAME: ${{ needs.create-release.outputs.release-name }}
        ASSET_NAME: ${{ steps.build-release-asset.outputs.asset-name }}
      run: gh release upload "${RELEASE_NAME}" "${ASSET_NAME}"
