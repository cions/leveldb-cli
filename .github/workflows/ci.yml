name: CI

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.15'
    - name: Checkout
      uses: actions/checkout@v2
    - name: Test
      shell: bash
      env:
        CGO_ENABLED: '0'
      run: go test -test.v -cover -mod=readonly

  create-release:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
    - id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true

  release:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        GOOS: [windows, darwin, linux]
        GOARCH: [amd64]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.15'
    - id: build
      name: Build
      env:
        CGO_ENABLED: '0'
        GOOS: ${{ matrix.GOOS }}
        GOARCH: ${{ matrix.GOARCH }}
      run: |
        ARTIFACT_DIR="leveldb-${GOOS}-${GOARCH}-${GITHUB_REF#refs/tags/v}"
        mkdir "${ARTIFACT_DIR}"
        cp LICENSE README.md "${ARTIFACT_DIR}"
        go build -v -mod=readonly -trimpath -ldflags "-s -w -X \"main.version=${GITHUB_REF#refs/tags/}\"" -o "${ARTIFACT_DIR}" ./cmd/...
        case "${GOOS}" in
          windows)
            zip "${ARTIFACT_DIR}.zip" "${ARTIFACT_DIR}"/*
            echo "::set-output name=asset-name::${ARTIFACT_DIR}.zip"
            echo "::set-output name=asset-content-type::application/zip"
            ;;
          *)
            tar zcf "${ARTIFACT_DIR}.tar.gz" "${ARTIFACT_DIR}"
            echo "::set-output name=asset-name::${ARTIFACT_DIR}.tar.gz"
            echo "::set-output name=asset-content-type::application/gzip"
            ;;
        esac
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.build.outputs.asset-name }}
        asset_name: ${{ steps.build.outputs.asset-name }}
        asset_content_type: ${{ steps.build.outputs.asset-content-type }}
